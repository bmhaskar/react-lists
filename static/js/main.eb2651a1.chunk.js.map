{"version":3,"sources":["components/Task/Task.jsx","components/Column/Column.jsx","intial-data.js","index.js"],"names":["Container","styled","div","_templateObject","props","isDragging","Task","_this","this","react_default","a","createElement","react_beautiful_dnd_esm","draggableId","task","id","index","provided","snapshot","Object","assign","draggableProps","dragHandleProps","ref","innerRef","content","Component","Column_templateObject","Title","h3","_templateObject2","TaskList","_templateObject3","isDraggingOver","InlineTasks","tasks","map","Task_Task","key","React","PureComponent","Column","column","Column_Container","title","droppableId","droppableProps","type","Column_InlineTasks","placeholder","intialData","task-1","task-2","task-3","columns","column-1","taskIds","column-2","column-3","columnOrder","src_templateObject","InnerColumns","_this$props","taskMap","taskId","components_Column_Column","App","state","onDragEnd","result","_objectSpread3","destination","source","start","finish","newStartTaskIds","Array","from","splice","newStartColumn","objectSpread","newFinishTaskIds","newFinishColumn","newState","defineProperty","setState","newTaskIds","newColumn","newColumnOrder","_this2","direction","src_Container","columnId","src_InnerColumns","ReactDOM","render","src_App","document","getElementById"],"mappings":"0bAGA,IAAMA,EAAYC,IAAOC,IAAVC,IAKO,SAAAC,GAAK,OAAKA,EAAMC,WAAY,aAAa,UAE1CC,mLACV,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,YAAaL,KAAKJ,MAAMU,KAAKC,GAAIC,MAAOR,KAAKJ,MAAMY,OAC3D,SAACC,EAAUC,GAAX,OACCT,EAAAC,EAAAC,cAACX,EAADmB,OAAAC,OAAA,GACMH,EAASI,eACTJ,EAASK,gBAFf,CAGEC,IAAKN,EAASO,SACdnB,WAAYa,EAASb,aAEpBE,EAAKH,MAAMU,KAAKW,kBAXKC,ieCJlC,IAAM1B,EAAYC,IAAOC,IAAVyB,IAOO,SAAAvB,GAAK,OAAIA,EAAMC,WAAY,aAAc,UAEzDuB,EAAQ3B,IAAO4B,GAAVC,KAGLC,EAAW9B,IAAOC,IAAV8B,IAEQ,SAAA5B,GAAK,OAAKA,EAAM6B,eAAiB,UAAW,YAK5DC,mLAGE,OAAQ1B,KAAKJ,MAAM+B,MAAMC,IAAI,SAACtB,EAAME,GAAP,OACzBP,EAAAC,EAAAC,cAAC0B,EAAD,CAAMC,IAAKxB,EAAKC,GAAID,KAAMA,EAAME,MAAOA,aAJzBuB,IAAMC,eAuCjBC,mLA9BJ,IAAAlC,EAAAC,KACP,OACAC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWI,MAAOR,KAAKJ,MAAMY,MAAOH,YAAaL,KAAKJ,MAAMsC,OAAO3B,IAClE,SAACE,EAAUC,GAAX,OACCT,EAAAC,EAAAC,cAACgC,EAADxB,OAAAC,OAAA,CACAG,IAAKN,EAASO,UACTP,EAASI,eACTJ,EAASK,gBAHd,CAICjB,WAAYa,EAASb,aAEpBI,EAAAC,EAAAC,cAACiB,EAAD,KAAQrB,EAAKH,MAAMsC,OAAOE,OAC1BnC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWiC,YAAatC,EAAKH,MAAMsC,OAAO3B,IACvC,SAACE,EAAUC,GAAX,OACCT,EAAAC,EAAAC,cAACoB,EAADZ,OAAAC,OAAA,CACAG,IAAKN,EAASO,UACVP,EAAS6B,eAFb,CAGAC,KAAK,OACLd,eAAgBf,EAASe,iBAExBxB,EAAAC,EAAAC,cAACqC,EAAD,CAAab,MAAO5B,EAAKH,MAAM+B,QAC7BlB,EAASgC,yBArBHV,IAAMb,WCRZwB,EAzBI,CACjBf,MAAO,CACLgB,SAAU,CAAEpC,GAAI,SAAUU,QAAS,wBACnC2B,SAAU,CAAErC,GAAI,SAAUU,QAAS,qBACnC4B,SAAU,CAAEtC,GAAI,SAAUU,QAAS,aAErC6B,QAAS,CACPC,WAAY,CACVxC,GAAI,WACJ6B,MAAO,QACPY,QAAS,CAAC,SAAU,SAAU,WAEhCC,WAAY,CACV1C,GAAI,WACJ6B,MAAO,cACPY,QAAS,IAEXE,WAAY,CACV3C,GAAI,WACJ6B,MAAO,OACPY,QAAS,KAGbG,YAAa,CAAC,WAAY,WAAY,sGCXxC,IAAM3D,EAAYC,IAAOC,IAAV0D,KAITC,mLACK,IAAAC,EAC4BtD,KAAKJ,MAAhCY,EADD8C,EACC9C,MAAO0B,EADRoB,EACQpB,OAAQqB,EADhBD,EACgBC,QACjB5B,EAAQO,EAAOc,QAAQpB,IAAI,SAAA4B,GAAM,OAAID,EAAQC,KACnD,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,CAAQjD,MAAOA,EAAO0B,OAAQA,EAAQP,MAAOA,WAJ7BI,IAAMC,eAO3B0B,6MACJC,MAAQjB,IACRkB,UAAY,SAAAC,GAAU,IAAAC,EACZC,EAA2CF,EAA3CE,YAAaC,EAA8BH,EAA9BG,OAAQ3D,EAAsBwD,EAAtBxD,YAAakC,EAASsB,EAATtB,KAC1C,GAAKwB,IAIHA,EAAY1B,cAAgB2B,EAAO3B,aACnC0B,EAAYvD,QAAUwD,EAAOxD,OAK/B,GAAa,WAAT+B,EAAJ,CAWA,IAAM0B,EAAQlE,EAAK4D,MAAMb,QAAQkB,EAAO3B,aAClC6B,EAASnE,EAAK4D,MAAMb,QAAQiB,EAAY1B,aAC9C,GAAI4B,IAAUC,EAAd,CAoBA,IAAMC,EAAkBC,MAAMC,KAAKJ,EAAMjB,SACzCmB,EAAgBG,OAAON,EAAOxD,MAAO,GACrC,IAAM+D,EAAc5D,OAAA6D,EAAA,EAAA7D,CAAA,GACfsD,EADe,CAElBjB,QAASmB,IAELM,EAAmBL,MAAMC,KAAKH,EAAOlB,SAC3CyB,EAAiBH,OAAOP,EAAYvD,MAAO,EAAGH,GAC9C,IAAMqE,EAAe/D,OAAA6D,EAAA,EAAA7D,CAAA,GAChBuD,EADgB,CAEnBlB,QAASyB,IAGLE,EAAQhE,OAAA6D,EAAA,EAAA7D,CAAA,GACTZ,EAAK4D,MADI,CAEZb,QAAQnC,OAAA6D,EAAA,EAAA7D,CAAA,GACHZ,EAAK4D,MAAMb,SADTgB,EAAA,GAAAnD,OAAAiE,EAAA,EAAAjE,CAAAmD,EAEJS,EAAehE,GAAKgE,GAFhB5D,OAAAiE,EAAA,EAAAjE,CAAAmD,EAGJY,EAAgBnE,GAAKmE,GAHjBZ,MAOT/D,EAAK8E,SAASF,OA1Cd,CACE,IAAMG,EAAaV,MAAMC,KAAKJ,EAAMjB,SACpC8B,EAAWR,OAAON,EAAOxD,MAAO,GAChCsE,EAAWR,OAAOP,EAAYvD,MAAO,EAAGH,GACxC,IAAM0E,EAASpE,OAAA6D,EAAA,EAAA7D,CAAA,GACVsD,EADU,CAEbjB,QAAS8B,IAELH,EAAQhE,OAAA6D,EAAA,EAAA7D,CAAA,GACTZ,EAAK4D,MADI,CAEZb,QAAQnC,OAAA6D,EAAA,EAAA7D,CAAA,GACHZ,EAAK4D,MAAMb,QADTnC,OAAAiE,EAAA,EAAAjE,CAAA,GAEJoE,EAAUxE,GAAKwE,MAIpBhF,EAAK8E,SAASF,QA7BhB,CACE,IAAMK,EAAiBZ,MAAMC,KAAKtE,EAAK4D,MAAMR,aAC7C6B,EAAeV,OAAON,EAAOxD,MAAO,GACpCwE,EAAeV,OAAOP,EAAYvD,MAAO,EAAGH,GAC5C,IAAMsE,EAAQhE,OAAA6D,EAAA,EAAA7D,CAAA,GACTZ,EAAK4D,MADI,CAEZR,YAAa6B,IAEfjF,EAAK8E,SAASF,6EAiDT,IAAAM,EAAAjF,KACP,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAiBwD,UAAW5D,KAAK4D,WAC/B3D,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEiC,YAAY,cACZ6C,UAAU,aACV3C,KAAK,UAEJ,SAAA9B,GAAQ,OACPR,EAAAC,EAAAC,cAACgF,EAADxE,OAAAC,OAAA,CAAWG,IAAKN,EAASO,UAAcP,EAAS6B,gBAC7C2C,EAAKtB,MAAMR,YAAYvB,IAAI,SAACwD,EAAU5E,GACrC,IAAM0B,EAAS+C,EAAKtB,MAAMb,QAAQsC,GAClC,OACEnF,EAAAC,EAAAC,cAACkF,EAAD,CACEvD,IAAKsD,EACLlD,OAAQA,EACRqB,QAAS0B,EAAKtB,MAAMhC,MACpBnB,MAAOA,MAIZC,EAASgC,uBA5FNV,IAAMb,WAoGxBoE,IAASC,OAAOtF,EAAAC,EAAAC,cAACqF,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.eb2651a1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { Draggable } from \"react-beautiful-dnd\";\nconst Container = styled.div`\n  padding: 8px;\n  border: 1px solid lightgray;\n  border-radius: 2px;\n  margin-bottom: 8px;\n  background-color: ${props => (props.isDragging? 'lightgreen':'white')};\n`;\nexport default class Task extends Component {\n  render() {\n    return (\n      <Draggable draggableId={this.props.task.id} index={this.props.index}>\n        {(provided, snapshot) => (\n          <Container\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            ref={provided.innerRef}\n            isDragging={snapshot.isDragging}\n          >\n            {this.props.task.content}\n          </Container>\n        )}\n      </Draggable>\n    );\n  }\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { Task } from \"../Task\";\n\n\nconst Container = styled.div`\n  margin: 8px;\n  border: 1px solid lightgray;\n  border-radius: 2px;\n  width: 30%;\n  display: flex;\n  flex-direction: column;\n  background-color: ${props => props.isDragging? 'lightgreen': 'white'};\n`;\nconst Title = styled.h3`\n  padding: 8px;\n`;\nconst TaskList = styled.div`\n  padding: 8px;\n  background-color: ${props => (props.isDraggingOver ? 'skyblue': 'inherit')};\n  flex-grow:1;\n  min-height: 100px;\n`;\n\nclass InlineTasks extends React.PureComponent {\n     \n    render() {\n        return  this.props.tasks.map((task, index) => (\n            <Task key={task.id} task={task} index={index} />\n          ))\n    }\n}\nclass Column extends React.Component {\n  render() {\n    return (\n    <Draggable index={this.props.index} draggableId={this.props.column.id}> \n    {(provided, snapshot) => \n      <Container \n      ref={provided.innerRef}\n       {...provided.draggableProps} \n       {...provided.dragHandleProps}\n       isDragging={snapshot.isDragging}\n       >\n        <Title>{this.props.column.title}</Title>\n        <Droppable droppableId={this.props.column.id}>\n          {(provided, snapshot) => (\n            <TaskList \n            ref={provided.innerRef} \n            {...provided.droppableProps}\n            type=\"task\"\n            isDraggingOver={snapshot.isDraggingOver}\n            >\n             <InlineTasks tasks={this.props.tasks}/>\n              {provided.placeholder}\n            </TaskList>\n          )}\n        </Droppable>\n      </Container>\n    }\n      </Draggable>\n    );\n  }\n}\nexport default Column;\n","const intialData = {\n  tasks: {\n    \"task-1\": { id: \"task-1\", content: \"Take out the garbage\" },\n    \"task-2\": { id: \"task-2\", content: \"Charge my tracker\" },\n    \"task-3\": { id: \"task-3\", content: \"Exercise\" }\n  },\n  columns: {\n    \"column-1\": {\n      id: \"column-1\",\n      title: \"To do\",\n      taskIds: [\"task-1\", \"task-2\", \"task-3\"]\n    },\n    \"column-2\": {\n      id: \"column-2\",\n      title: \"In progress\",\n      taskIds: []\n    },\n    \"column-3\": {\n      id: \"column-3\",\n      title: \"Done\",\n      taskIds: []\n    }\n  },\n  columnOrder: [\"column-1\", \"column-2\", \"column-3\"]\n};\nexport default intialData;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"@atlaskit/css-reset\";\nimport styled from \"styled-components\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { Column } from \"./components/Column\";\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nimport intialData from \"./intial-data\";\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nclass InnerColumns extends React.PureComponent {\n  render() {\n    const { index, column, taskMap } = this.props;\n    const tasks = column.taskIds.map(taskId => taskMap[taskId]);\n    return <Column index={index} column={column} tasks={tasks} />;\n  }\n}\nclass App extends React.Component {\n  state = intialData;\n  onDragEnd = result => {\n    const { destination, source, draggableId, type } = result;\n    if (!destination) {\n      return;\n    }\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    if (type === \"column\") {\n      const newColumnOrder = Array.from(this.state.columnOrder);\n      newColumnOrder.splice(source.index, 1);\n      newColumnOrder.splice(destination.index, 0, draggableId);\n      const newState = {\n        ...this.state,\n        columnOrder: newColumnOrder\n      };\n      this.setState(newState);\n      return;\n    }\n    const start = this.state.columns[source.droppableId];\n    const finish = this.state.columns[destination.droppableId];\n    if (start === finish) {\n      const newTaskIds = Array.from(start.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n      const newColumn = {\n        ...start,\n        taskIds: newTaskIds\n      };\n      const newState = {\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n\n      this.setState(newState);\n      return;\n    }\n\n    const newStartTaskIds = Array.from(start.taskIds);\n    newStartTaskIds.splice(source.index, 1);\n    const newStartColumn = {\n      ...start,\n      taskIds: newStartTaskIds\n    };\n    const newFinishTaskIds = Array.from(finish.taskIds);\n    newFinishTaskIds.splice(destination.index, 0, draggableId);\n    const newFinishColumn = {\n      ...finish,\n      taskIds: newFinishTaskIds\n    };\n\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newStartColumn.id]: newStartColumn,\n        [newFinishColumn.id]: newFinishColumn\n      }\n    };\n\n    this.setState(newState);\n  };\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable\n          droppableId=\"all-columns\"\n          direction=\"horizontal\"\n          type=\"column\"\n        >\n          {provided => (\n            <Container ref={provided.innerRef} {...provided.droppableProps}>\n              {this.state.columnOrder.map((columnId, index) => {\n                const column = this.state.columns[columnId];\n                return (\n                  <InnerColumns\n                    key={columnId}\n                    column={column}\n                    taskMap={this.state.tasks}\n                    index={index}\n                  />\n                );\n              })}\n              {provided.placeholder}\n            </Container>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}